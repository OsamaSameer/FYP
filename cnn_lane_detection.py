# -*- coding: utf-8 -*-
"""CNN-Lane-Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AkeknocY88LxZUo3cdGbPmsGmTfwuBsi
"""

from google.colab import files

uploaded = files.upload()

!pip install scipy==1.1.0

!pip install scipy==1.1.0

import numpy as np 
import cv2
from moviepy.editor import VideoFileClip
from tensorflow import keras

import scipy

from scipy.misc.pilutil import imresize

model = keras.models.load_model('model.h5')

class Lanes():
  def __init__(self):
    self.recent_fit = []
    self.avg_fit = []


def road_lines(image):
  #value = image.size
  #print(value)

  small_img = imresize(image,(80,160,3))
  small_img = np.array(small_img)
  small_img = small_img[None,:,:,:]

  prediction  = model.predict(small_img)[0]*255
  lanes.recent_fit.append(prediction)

  if len(lanes.recent_fit) > 5:
    lanes.recent_fit = lanes.recent_fit[1:]
  
  lanes.avg_fit = np.mean([i for i in lanes.recent_fit],axis = 0)

  blanks = np.zeros_like(lanes.avg_fit).astype(np.uint8)

  lane_draw = np.dstack((blanks,lanes.avg_fit,blanks))
  #clip = image.subclip(0, 5)
  
  lane_image = imresize(lane_draw,(540, 960, 3))
  result = cv2.addWeighted(image,1,lane_image,1,0)

  return result

"""Making the class called Lanes and define the init methored of this class that will contain only two lists the recent fit list self.recent_fit = [] which is responsible for storing the most recent predictions
and the self.avg_fit = [] hat will contains the avg 
the prediction the prediction we are taking about will look like this 
The CNN model will predict wether each pixcel in the frame belong to the lane or not it will do this for every frame of the imput video 
This is what the lane class contains




this a fuction in which we do preprocessing in the video frame by frame 
we will call it def road_lines(image):
step # 1
  we have to resize each frame using small_img = imresize(image,(80,160,3))
  and make it 80/160
step # 2
  Now the small inage is turened in to array which will make the code more effient 
Step # 3
  we procede in an other dimentions to the image 
in this dimention the predictions for each pixel in the image will be stored 

The preprocessing is basically done now



Now feed the image to the CNN model by using 
prediction  = model.predict(small_img)[0]*255
fcores will will keep only the prediction part specifing the zero index and since the prediction will be between zero and one we have to multiply by 255 in order to be able to use it as an image other wise it will be so dark 

The prediction is appended to the recent fit list of the lanes class

and if the lenght of this list excede 5 then we dicard the first element of the list each time and that means that the list will only contain the maximum of the 5 elements 


This moving window 5 predictions will be avereged using the mean methored from numpy 
"""

uploaded = files.upload()

vid_input = VideoFileClip("solidWhiteRight.mp4")
vid_output = 'lanes_output_clip.mp4'
clip = vid_input.subclip(0, 5)
w,h = clip.size

print("Height is ", h)
print("Width is", w)

lanes = Lanes()

vid_clip = vid_input.fl_image(road_lines)
#vid_clip.write_videofile(vid_output)

from google.colab import drive
drive.mount('/content/drive')